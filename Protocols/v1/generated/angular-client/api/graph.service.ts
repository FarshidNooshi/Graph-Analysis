/**
 * PolarisApi
 * This is the api for Polaris Data Analysis Project on  [PolarisGithub](https://github.com/Star-Academy/StarAcademy-Group2/) 
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Filter } from '../model/filter';
import { Graph } from '../model/graph';
import { InlineResponse200 } from '../model/inlineResponse200';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GraphService {

    protected basePath = 'http://localhost:5000/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get the flow between two specified nodes
     * 
     * @param sourceNodeId Id of the source of the path
     * @param targetNodeId Id of the target of the path
     * @param nodeFilter Filter on nodes of the path of the flow in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param edgeFilter Filter on edges of the path of the flow in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param nodePageIndex Pagination pageIndex
     * @param nodePageSize Pagination pageSize
     * @param edgePageIndex Pagination pageIndex
     * @param edgePageSize Pagination pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFlowBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Graph>>;
    public getFlowBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Graph>>>;
    public getFlowBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Graph>>>;
    public getFlowBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sourceNodeId === null || sourceNodeId === undefined) {
            throw new Error('Required parameter sourceNodeId was null or undefined when calling getFlowBetweenNodes.');
        }

        if (targetNodeId === null || targetNodeId === undefined) {
            throw new Error('Required parameter targetNodeId was null or undefined when calling getFlowBetweenNodes.');
        }







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sourceNodeId !== undefined && sourceNodeId !== null) {
            queryParameters = queryParameters.set('sourceNodeId', <any>sourceNodeId);
        }
        if (targetNodeId !== undefined && targetNodeId !== null) {
            queryParameters = queryParameters.set('targetNodeId', <any>targetNodeId);
        }
        if (nodeFilter !== undefined && nodeFilter !== null) {
            queryParameters = queryParameters.set('nodeFilter', <any>nodeFilter);
        }
        if (edgeFilter !== undefined && edgeFilter !== null) {
            queryParameters = queryParameters.set('edgeFilter', <any>edgeFilter);
        }
        if (nodePageIndex !== undefined && nodePageIndex !== null) {
            queryParameters = queryParameters.set('nodePageIndex', <any>nodePageIndex);
        }
        if (nodePageSize !== undefined && nodePageSize !== null) {
            queryParameters = queryParameters.set('nodePageSize', <any>nodePageSize);
        }
        if (edgePageIndex !== undefined && edgePageIndex !== null) {
            queryParameters = queryParameters.set('edgePageIndex', <any>edgePageIndex);
        }
        if (edgePageSize !== undefined && edgePageSize !== null) {
            queryParameters = queryParameters.set('edgePageSize', <any>edgePageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Graph>>('get',`${this.basePath}/graph/flow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the whole graph
     * 
     * @param nodeFilter Filter on neighbor nodes of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param edgeFilter Filter on connected edges of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param nodePageIndex Pagination pageIndex
     * @param nodePageSize Pagination pageSize
     * @param nodeOrderBy ordering of the nodes in \&quot;(field) (asc desc)\&quot; format
     * @param edgePageIndex Pagination pageIndex
     * @param edgePageSize Pagination pageSize
     * @param edgeOrderBy ordering of the edges in \&quot;(field) (asc desc)\&quot; format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGraph(nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Graph>;
    public getGraph(nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;
    public getGraph(nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;
    public getGraph(nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeFilter !== undefined && nodeFilter !== null) {
            queryParameters = queryParameters.set('nodeFilter', <any>nodeFilter);
        }
        if (edgeFilter !== undefined && edgeFilter !== null) {
            queryParameters = queryParameters.set('edgeFilter', <any>edgeFilter);
        }
        if (nodePageIndex !== undefined && nodePageIndex !== null) {
            queryParameters = queryParameters.set('nodePageIndex', <any>nodePageIndex);
        }
        if (nodePageSize !== undefined && nodePageSize !== null) {
            queryParameters = queryParameters.set('nodePageSize', <any>nodePageSize);
        }
        if (nodeOrderBy !== undefined && nodeOrderBy !== null) {
            queryParameters = queryParameters.set('nodeOrderBy', <any>nodeOrderBy);
        }
        if (edgePageIndex !== undefined && edgePageIndex !== null) {
            queryParameters = queryParameters.set('edgePageIndex', <any>edgePageIndex);
        }
        if (edgePageSize !== undefined && edgePageSize !== null) {
            queryParameters = queryParameters.set('edgePageSize', <any>edgePageSize);
        }
        if (edgeOrderBy !== undefined && edgeOrderBy !== null) {
            queryParameters = queryParameters.set('edgeOrderBy', <any>edgeOrderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Graph>('get',`${this.basePath}/graph`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the stats of the graph
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGraphStats(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public getGraphStats(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public getGraphStats(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public getGraphStats(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse200>('get',`${this.basePath}/graph/stats`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the expansion of a bunch of nodes by nodeId array
     * 
     * @param nodeIds Ids of the nodes to be expanded
     * @param nodeFilter Filter on neighbor nodes of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param edgeFilter Filter on connected edges of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param nodePageIndex Pagination pageIndex
     * @param nodePageSize Pagination pageSize
     * @param nodeOrderBy ordering of the nodes in \&quot;(field) (asc desc)\&quot; format
     * @param edgePageIndex Pagination pageIndex
     * @param edgePageSize Pagination pageSize
     * @param edgeOrderBy ordering of the edges in \&quot;(field) (asc desc)\&quot; format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMultipleNodesExpansionsById(nodeIds: Array<string>, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Graph>;
    public getMultipleNodesExpansionsById(nodeIds: Array<string>, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;
    public getMultipleNodesExpansionsById(nodeIds: Array<string>, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;
    public getMultipleNodesExpansionsById(nodeIds: Array<string>, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeIds === null || nodeIds === undefined) {
            throw new Error('Required parameter nodeIds was null or undefined when calling getMultipleNodesExpansionsById.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeIds) {
            nodeIds.forEach((element) => {
                queryParameters = queryParameters.append('nodeIds', <any>element);
            })
        }
        if (nodeFilter !== undefined && nodeFilter !== null) {
            queryParameters = queryParameters.set('nodeFilter', <any>nodeFilter);
        }
        if (edgeFilter !== undefined && edgeFilter !== null) {
            queryParameters = queryParameters.set('edgeFilter', <any>edgeFilter);
        }
        if (nodePageIndex !== undefined && nodePageIndex !== null) {
            queryParameters = queryParameters.set('nodePageIndex', <any>nodePageIndex);
        }
        if (nodePageSize !== undefined && nodePageSize !== null) {
            queryParameters = queryParameters.set('nodePageSize', <any>nodePageSize);
        }
        if (nodeOrderBy !== undefined && nodeOrderBy !== null) {
            queryParameters = queryParameters.set('nodeOrderBy', <any>nodeOrderBy);
        }
        if (edgePageIndex !== undefined && edgePageIndex !== null) {
            queryParameters = queryParameters.set('edgePageIndex', <any>edgePageIndex);
        }
        if (edgePageSize !== undefined && edgePageSize !== null) {
            queryParameters = queryParameters.set('edgePageSize', <any>edgePageSize);
        }
        if (edgeOrderBy !== undefined && edgeOrderBy !== null) {
            queryParameters = queryParameters.set('edgeOrderBy', <any>edgeOrderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Graph>('get',`${this.basePath}/graph/expansion`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the expansion of one node by nodeId
     * 
     * @param nodeId Id of the node to be expanded
     * @param nodeFilter Filter on neighbor nodes of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param edgeFilter Filter on connected edges of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param nodePageIndex Pagination pageIndex
     * @param nodePageSize Pagination pageSize
     * @param nodeOrderBy ordering of the nodes in \&quot;(field) (asc desc)\&quot; format
     * @param edgePageIndex Pagination pageIndex
     * @param edgePageSize Pagination pageSize
     * @param edgeOrderBy ordering of the edges in \&quot;(field) (asc desc)\&quot; format
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNodeExpansionById(nodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'body', reportProgress?: boolean): Observable<Graph>;
    public getNodeExpansionById(nodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Graph>>;
    public getNodeExpansionById(nodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Graph>>;
    public getNodeExpansionById(nodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodePageIndex?: number, nodePageSize?: number, nodeOrderBy?: string, edgePageIndex?: number, edgePageSize?: number, edgeOrderBy?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (nodeId === null || nodeId === undefined) {
            throw new Error('Required parameter nodeId was null or undefined when calling getNodeExpansionById.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (nodeFilter !== undefined && nodeFilter !== null) {
            queryParameters = queryParameters.set('nodeFilter', <any>nodeFilter);
        }
        if (edgeFilter !== undefined && edgeFilter !== null) {
            queryParameters = queryParameters.set('edgeFilter', <any>edgeFilter);
        }
        if (nodePageIndex !== undefined && nodePageIndex !== null) {
            queryParameters = queryParameters.set('nodePageIndex', <any>nodePageIndex);
        }
        if (nodePageSize !== undefined && nodePageSize !== null) {
            queryParameters = queryParameters.set('nodePageSize', <any>nodePageSize);
        }
        if (nodeOrderBy !== undefined && nodeOrderBy !== null) {
            queryParameters = queryParameters.set('nodeOrderBy', <any>nodeOrderBy);
        }
        if (edgePageIndex !== undefined && edgePageIndex !== null) {
            queryParameters = queryParameters.set('edgePageIndex', <any>edgePageIndex);
        }
        if (edgePageSize !== undefined && edgePageSize !== null) {
            queryParameters = queryParameters.set('edgePageSize', <any>edgePageSize);
        }
        if (edgeOrderBy !== undefined && edgeOrderBy !== null) {
            queryParameters = queryParameters.set('edgeOrderBy', <any>edgeOrderBy);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Graph>('get',`${this.basePath}/graph/expansion/${encodeURIComponent(String(nodeId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all the paths between two specified nodes
     * 
     * @param sourceNodeId Id of the source of the path
     * @param targetNodeId Id of the target of the path
     * @param nodeFilter Filter on nodes of the path in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param edgeFilter Filter on edges of the path in [\&quot;{field} {operator} {value}\&quot;, ...] format
     * @param nodeOrderby Order of the nodes each time algorithm selects neighbors in \&quot;(field) (asc desc)\&quot; format
     * @param edgeOrderby Order of the edges each time algorithm selects neighbors in \&quot;(field) (asc desc)\&quot; format
     * @param nodePageIndex Pagination pageIndex
     * @param nodePageSize Pagination pageSize
     * @param edgePageIndex Pagination pageIndex
     * @param edgePageSize Pagination pageSize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPathsBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodeOrderby?: string, edgeOrderby?: string, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Graph>>;
    public getPathsBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodeOrderby?: string, edgeOrderby?: string, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Graph>>>;
    public getPathsBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodeOrderby?: string, edgeOrderby?: string, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Graph>>>;
    public getPathsBetweenNodes(sourceNodeId: string, targetNodeId: string, nodeFilter?: Filter, edgeFilter?: Filter, nodeOrderby?: string, edgeOrderby?: string, nodePageIndex?: number, nodePageSize?: number, edgePageIndex?: number, edgePageSize?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sourceNodeId === null || sourceNodeId === undefined) {
            throw new Error('Required parameter sourceNodeId was null or undefined when calling getPathsBetweenNodes.');
        }

        if (targetNodeId === null || targetNodeId === undefined) {
            throw new Error('Required parameter targetNodeId was null or undefined when calling getPathsBetweenNodes.');
        }









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sourceNodeId !== undefined && sourceNodeId !== null) {
            queryParameters = queryParameters.set('sourceNodeId', <any>sourceNodeId);
        }
        if (targetNodeId !== undefined && targetNodeId !== null) {
            queryParameters = queryParameters.set('targetNodeId', <any>targetNodeId);
        }
        if (nodeFilter !== undefined && nodeFilter !== null) {
            queryParameters = queryParameters.set('nodeFilter', <any>nodeFilter);
        }
        if (edgeFilter !== undefined && edgeFilter !== null) {
            queryParameters = queryParameters.set('edgeFilter', <any>edgeFilter);
        }
        if (nodeOrderby !== undefined && nodeOrderby !== null) {
            queryParameters = queryParameters.set('nodeOrderby', <any>nodeOrderby);
        }
        if (edgeOrderby !== undefined && edgeOrderby !== null) {
            queryParameters = queryParameters.set('edgeOrderby', <any>edgeOrderby);
        }
        if (nodePageIndex !== undefined && nodePageIndex !== null) {
            queryParameters = queryParameters.set('nodePageIndex', <any>nodePageIndex);
        }
        if (nodePageSize !== undefined && nodePageSize !== null) {
            queryParameters = queryParameters.set('nodePageSize', <any>nodePageSize);
        }
        if (edgePageIndex !== undefined && edgePageIndex !== null) {
            queryParameters = queryParameters.set('edgePageIndex', <any>edgePageIndex);
        }
        if (edgePageSize !== undefined && edgePageSize !== null) {
            queryParameters = queryParameters.set('edgePageSize', <any>edgePageSize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Graph>>('get',`${this.basePath}/graph/paths`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
