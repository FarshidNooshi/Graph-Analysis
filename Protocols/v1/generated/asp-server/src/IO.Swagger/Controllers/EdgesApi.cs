/*
 * PolarisApi
 *
 * This is the api for Polaris Data Analysis Project on  [PolarisGithub](https://github.com/Star-Academy/StarAcademy-Group2/) 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EdgesApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new Edge to the dataset
        /// </summary>
        /// <param name="body">Edge object to be sent</param>
        /// <response code="201">Created</response>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/api/v1/edges")]
        [ValidateModelState]
        [SwaggerOperation("AddEdge")]
        public virtual IActionResult AddEdge([FromBody]Edge body)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete Edges by id
        /// </summary>
        /// <param name="edgeId">Edge id to delete</param>
        /// <response code="200">success</response>
        /// <response code="404">Edge not found</response>
        [HttpDelete]
        [Route("/api/v1/edges/{edgeId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEdge")]
        public virtual IActionResult DeleteEdge([FromRoute][Required]string edgeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Edges by Id
        /// </summary>
        /// <remarks>Returns a single Edge</remarks>
        /// <param name="edgeId">Id of Edge to return</param>
        /// <response code="200">success</response>
        /// <response code="404">Edge not found</response>
        [HttpGet]
        [Route("/api/v1/edges/{edgeId}")]
        [ValidateModelState]
        [SwaggerOperation("GetEdgeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Edge), description: "success")]
        public virtual IActionResult GetEdgeById([FromRoute][Required]string edgeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Edge));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : \"38791925753\",\n  \"source\" : \"3000000271\",\n  \"target\" : \"7000000434\",\n  \"data\" : {\n    \"timestamp\" : \"2018-05-24 6:42:05\",\n    \"trackingId\" : 661520,\n    \"amount\" : 8370000,\n    \"type\" : \"کارت به کارت\"\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Edge>(exampleJson)
                        : default(Edge);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Edge(s)
        /// </summary>
        /// <param name="filter">Filter on Edges in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="pageIndex">Pagination pageIndex</param>
        /// <param name="pageSize">Pagination pageSize</param>
        /// <response code="200">Successful operation</response>
        [HttpGet]
        [Route("/api/v1/edges")]
        [ValidateModelState]
        [SwaggerOperation("GetEdges")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Edge>), description: "Successful operation")]
        public virtual IActionResult GetEdges([FromQuery]List<string> filter, [FromQuery]int? pageIndex, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Edge>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"id\" : \"38791925753\",\n  \"source\" : \"3000000271\",\n  \"target\" : \"7000000434\",\n  \"data\" : {\n    \"timestamp\" : \"2018-05-24 6:42:05\",\n    \"trackingId\" : 661520,\n    \"amount\" : 8370000,\n    \"type\" : \"کارت به کارت\"\n  }\n}, {\n  \"id\" : \"38791925753\",\n  \"source\" : \"3000000271\",\n  \"target\" : \"7000000434\",\n  \"data\" : {\n    \"timestamp\" : \"2018-05-24 6:42:05\",\n    \"trackingId\" : 661520,\n    \"amount\" : 8370000,\n    \"type\" : \"کارت به کارت\"\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Edge>>(exampleJson)
                        : default(List<Edge>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an existing Edge
        /// </summary>
        /// <param name="body">Edge object to be sent</param>
        /// <response code="200">Updated</response>
        /// <response code="404">Edge not found</response>
        /// <response code="405">Invalid input</response>
        [HttpPut]
        [Route("/api/v1/edges")]
        [ValidateModelState]
        [SwaggerOperation("UpdateEdge")]
        public virtual IActionResult UpdateEdge([FromBody]Edge body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }
    }
}
