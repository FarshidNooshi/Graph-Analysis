/*
 * PolarisApi
 *
 * This is the api for Polaris Data Analysis Project on  [PolarisGithub](https://github.com/Star-Academy/StarAcademy-Group2/) 
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class GraphApiController : ControllerBase
    { 
        /// <summary>
        /// Get the flow between two specified nodes
        /// </summary>
        /// <param name="sourceNodeId">Id of the source of the path</param>
        /// <param name="targetNodeId">Id of the target of the path</param>
        /// <param name="nodeFilter">Filter on nodes of the path of the flow in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="edgeFilter">Filter on edges of the path of the flow in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="nodePageIndex">Pagination pageIndex</param>
        /// <param name="nodePageSize">Pagination pageSize</param>
        /// <param name="edgePageIndex">Pagination pageIndex</param>
        /// <param name="edgePageSize">Pagination pageSize</param>
        /// <response code="200">success - returns an array of graphs that each element itself, is a path</response>
        /// <response code="400">bad request</response>
        /// <response code="404">node not found</response>
        [HttpGet]
        [Route("/api/v1/graph/flow")]
        [ValidateModelState]
        [SwaggerOperation("GetFlowBetweenNodes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Graph>), description: "success - returns an array of graphs that each element itself, is a path")]
        public virtual IActionResult GetFlowBetweenNodes([FromQuery][Required()]string sourceNodeId, [FromQuery][Required()]string targetNodeId, [FromQuery]Filter nodeFilter, [FromQuery]Filter edgeFilter, [FromQuery]int? nodePageIndex, [FromQuery]int? nodePageSize, [FromQuery]int? edgePageIndex, [FromQuery]int? edgePageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Graph>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"nodes\" : [ {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  }, {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  } ],\n  \"edges\" : [ {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  }, {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  } ]\n}, {\n  \"nodes\" : [ {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  }, {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  } ],\n  \"edges\" : [ {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  }, {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Graph>>(exampleJson)
                        : default(List<Graph>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the whole graph
        /// </summary>
        /// <param name="nodeFilter">Filter on neighbor nodes of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="edgeFilter">Filter on connected edges of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="nodePageIndex">Pagination pageIndex</param>
        /// <param name="nodePageSize">Pagination pageSize</param>
        /// <param name="nodeOrderBy">ordering of the nodes in \&quot;(field) (asc desc)\&quot; format</param>
        /// <param name="edgePageIndex">Pagination pageIndex</param>
        /// <param name="edgePageSize">Pagination pageSize</param>
        /// <param name="edgeOrderBy">ordering of the edges in \&quot;(field) (asc desc)\&quot; format</param>
        /// <response code="200">success</response>
        /// <response code="400">bad request</response>
        [HttpGet]
        [Route("/api/v1/graph")]
        [ValidateModelState]
        [SwaggerOperation("GetGraph")]
        [SwaggerResponse(statusCode: 200, type: typeof(Graph), description: "success")]
        public virtual IActionResult GetGraph([FromQuery]Filter nodeFilter, [FromQuery]Filter edgeFilter, [FromQuery]int? nodePageIndex, [FromQuery]int? nodePageSize, [FromQuery]string nodeOrderBy, [FromQuery]int? edgePageIndex, [FromQuery]int? edgePageSize, [FromQuery]string edgeOrderBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Graph));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"nodes\" : [ {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  }, {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  } ],\n  \"edges\" : [ {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  }, {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Graph>(exampleJson)
                        : default(Graph);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the stats of the graph
        /// </summary>
        /// <response code="200">success</response>
        [HttpGet]
        [Route("/api/v1/graph/stats")]
        [ValidateModelState]
        [SwaggerOperation("GetGraphStats")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "success")]
        public virtual IActionResult GetGraphStats()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));
            string exampleJson = null;
            exampleJson = "{\n  \"nodesCount\" : 1000,\n  \"edgesCount\" : 2567\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
                        : default(InlineResponse200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the expansion of a bunch of nodes by nodeId array
        /// </summary>
        /// <param name="nodeIds">Ids of the nodes to be expanded</param>
        /// <param name="nodeFilter">Filter on neighbor nodes of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="edgeFilter">Filter on connected edges of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="nodePageIndex">Pagination pageIndex</param>
        /// <param name="nodePageSize">Pagination pageSize</param>
        /// <param name="nodeOrderBy">ordering of the nodes in \&quot;(field) (asc desc)\&quot; format</param>
        /// <param name="edgePageIndex">Pagination pageIndex</param>
        /// <param name="edgePageSize">Pagination pageSize</param>
        /// <param name="edgeOrderBy">ordering of the edges in \&quot;(field) (asc desc)\&quot; format</param>
        /// <response code="200">success - returns a bunch of neighbor edges and nodes</response>
        /// <response code="400">bad request</response>
        /// <response code="404">node not found</response>
        [HttpGet]
        [Route("/api/v1/graph/expansion")]
        [ValidateModelState]
        [SwaggerOperation("GetMultipleNodesExpansionsById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Graph), description: "success - returns a bunch of neighbor edges and nodes")]
        public virtual IActionResult GetMultipleNodesExpansionsById([FromQuery][Required()]List<string> nodeIds, [FromQuery]Filter nodeFilter, [FromQuery]Filter edgeFilter, [FromQuery]int? nodePageIndex, [FromQuery]int? nodePageSize, [FromQuery]string nodeOrderBy, [FromQuery]int? edgePageIndex, [FromQuery]int? edgePageSize, [FromQuery]string edgeOrderBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Graph));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"nodes\" : [ {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  }, {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  } ],\n  \"edges\" : [ {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  }, {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Graph>(exampleJson)
                        : default(Graph);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the expansion of one node by nodeId
        /// </summary>
        /// <param name="nodeId">Id of the node to be expanded</param>
        /// <param name="nodeFilter">Filter on neighbor nodes of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="edgeFilter">Filter on connected edges of the node in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="nodePageIndex">Pagination pageIndex</param>
        /// <param name="nodePageSize">Pagination pageSize</param>
        /// <param name="nodeOrderBy">ordering of the nodes in \&quot;(field) (asc desc)\&quot; format</param>
        /// <param name="edgePageIndex">Pagination pageIndex</param>
        /// <param name="edgePageSize">Pagination pageSize</param>
        /// <param name="edgeOrderBy">ordering of the edges in \&quot;(field) (asc desc)\&quot; format</param>
        /// <response code="200">success - returns a bunch of neighbor edges and nodes</response>
        /// <response code="400">bad request</response>
        /// <response code="404">node not found</response>
        [HttpGet]
        [Route("/api/v1/graph/expansion/{nodeId}")]
        [ValidateModelState]
        [SwaggerOperation("GetNodeExpansionById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Graph), description: "success - returns a bunch of neighbor edges and nodes")]
        public virtual IActionResult GetNodeExpansionById([FromRoute][Required]string nodeId, [FromQuery]Filter nodeFilter, [FromQuery]Filter edgeFilter, [FromQuery]int? nodePageIndex, [FromQuery]int? nodePageSize, [FromQuery]string nodeOrderBy, [FromQuery]int? edgePageIndex, [FromQuery]int? edgePageSize, [FromQuery]string edgeOrderBy)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Graph));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"nodes\" : [ {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  }, {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  } ],\n  \"edges\" : [ {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  }, {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Graph>(exampleJson)
                        : default(Graph);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all the paths between two specified nodes
        /// </summary>
        /// <param name="sourceNodeId">Id of the source of the path</param>
        /// <param name="targetNodeId">Id of the target of the path</param>
        /// <param name="nodeFilter">Filter on nodes of the path in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="edgeFilter">Filter on edges of the path in [\&quot;{field} {operator} {value}\&quot;, ...] format</param>
        /// <param name="nodeOrderby">Order of the nodes each time algorithm selects neighbors in \&quot;(field) (asc desc)\&quot; format</param>
        /// <param name="edgeOrderby">Order of the edges each time algorithm selects neighbors in \&quot;(field) (asc desc)\&quot; format</param>
        /// <param name="nodePageIndex">Pagination pageIndex</param>
        /// <param name="nodePageSize">Pagination pageSize</param>
        /// <param name="edgePageIndex">Pagination pageIndex</param>
        /// <param name="edgePageSize">Pagination pageSize</param>
        /// <response code="200">success - returns an array of graphs that each element itself, is a path</response>
        /// <response code="400">bad request</response>
        /// <response code="404">node not found</response>
        [HttpGet]
        [Route("/api/v1/graph/paths")]
        [ValidateModelState]
        [SwaggerOperation("GetPathsBetweenNodes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Graph>), description: "success - returns an array of graphs that each element itself, is a path")]
        public virtual IActionResult GetPathsBetweenNodes([FromQuery][Required()]string sourceNodeId, [FromQuery][Required()]string targetNodeId, [FromQuery]Filter nodeFilter, [FromQuery]Filter edgeFilter, [FromQuery]string nodeOrderby, [FromQuery]string edgeOrderby, [FromQuery]int? nodePageIndex, [FromQuery]int? nodePageSize, [FromQuery]int? edgePageIndex, [FromQuery]int? edgePageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Graph>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"nodes\" : [ {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  }, {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  } ],\n  \"edges\" : [ {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  }, {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  } ]\n}, {\n  \"nodes\" : [ {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  }, {\n    \"id\" : \"6000000198\",\n    \"data\" : {\n      \"cardId\" : \"6104340000000000\",\n      \"sheba\" : \"IR120778801496000000198\",\n      \"accountType\" : \"پس انداز\",\n      \"branchTelephone\" : \"55638667\",\n      \"branchAdress\" : \"تهران-خیابان خیام-بالاتر از چهارراه گلوبندک\",\n      \"branchName\" : \"گلوبندک\",\n      \"ownerName\" : \"افسر\",\n      \"ownerFamilyName\" : \"طباطبایی\",\n      \"ownerId\" : \"1227114110\"\n    }\n  } ],\n  \"edges\" : [ {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  }, {\n    \"id\" : \"38791925753\",\n    \"source\" : \"3000000271\",\n    \"target\" : \"7000000434\",\n    \"data\" : {\n      \"timestamp\" : \"2018-05-24 6:42:05\",\n      \"trackingId\" : 661520,\n      \"amount\" : 8370000,\n      \"type\" : \"کارت به کارت\"\n    }\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Graph>>(exampleJson)
                        : default(List<Graph>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
